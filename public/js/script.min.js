var script=function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);class i{constructor(t){this.textDestinationContainer=void 0,this.animationDelay=50,this.htmlWrapperTag="p",this.setDestination(t)}setDestination(t){this.textDestinationContainer=document.getElementById(t)}getTargetElement(){let t=this.textDestinationContainer;return this.htmlWrapperTag&&(this.textDestinationContainer.insertAdjacentHTML("beforeend",`<${this.htmlWrapperTag}></${this.htmlWrapperTag}>`),t=document.querySelector("#"+this.textDestinationContainer.id+` ${this.htmlWrapperTag}:last-of-type`)),t}async writeJson(t,e=.4){let n=t;"string"==typeof n&&(n=JSON.parse(n)),n=JSON.stringify(n,null,2),this.textDestinationContainer.insertAdjacentHTML("beforeend","<pre></pre>");const i=this.textDestinationContainer.querySelector("pre:last-of-type");for(let t=0;t<n.length;t++)await this.sleepAnimationDelay(e),this.writeChar(n.charAt(t),i)}async write(t,e=1){let n=t;if("object"==typeof n)for(var i in n)await this.write(n[i],e);else{const t=this.getTargetElement();for(let i=0;i<n.length;i++)await this.sleepAnimationDelay(e),this.writeHtmlChar(n.charAt(i),t)}}async skipAnimation(){const t=this.animationDelay;this.animationDelay=0,await new Promise(e=>setTimeout(e,t)),this.animationDelay=t}writeHtmlChar(t,e){e.insertAdjacentHTML("beforeend",`<span>${t}</span>`),this.scrollDown()}writeChar(t,e){e.insertAdjacentText("beforeend",`${t}`),this.scrollDown()}scrollDown(){this.textDestinationContainer.parentElement.scrollTop=this.textDestinationContainer.parentElement.scrollHeight}sleepAnimationDelay(t=1){return this.animationDelay*t==0||new Promise(e=>setTimeout(e,this.animationDelay*t))}}class o{constructor(t,e){this.socketUri="wss://beta-ws.kraken.com",this.allowedCommands=["ping","subscribe","unsubscribe","addOrder","cancelOrder"],this.terminal=t,this.jsonDestinationContainer=document.getElementById(e)}addEventsListener(){this.socket.addEventListener("open",()=>{this.terminal.write("WebSockets connection opened")}),this.socket.addEventListener("message",t=>{this.messageReceived(t.data)}),this.socket.addEventListener("close",()=>{this.terminal.write("WebSockets connection closed")}),this.socket.addEventListener("error",t=>{console.log("WebSocket Error:  ",t),this.terminal.write("WebSocket Error",0),this.terminal.writeJson(t)})}messageReceived(t){this.terminal.writeJson(t),this.addResult(t,"server")}sendMessage(t){if(!this.socket||1!=this.socket.readyState)return void this.terminal.write("The socket is not open !",0);const e={event:t},n=JSON.stringify(e);this.terminal.write("Sending command..."),this.addResult(n,"client"),this.socket.send(n)}submitCommand(t){event.preventDefault();const e=t.querySelector('input[type="text"]'),n=e.value;this.terminal.write(n),this.allowedCommands.indexOf(n)>=0?this.sendMessage(n):"open"==n||"connect"==n?this.openSocket():"close"==n||"disconnect"==n||"exit"==n?this.closeSocket():"infos"==n||"socketInfos"==n?this.terminal.writeJson(this.getConnectionInfos()):(this.terminal.write("This command is invalid. But let's try it all the same..."),this.sendMessage(n)),e.value=""}openSocket(){this.checkSocketOpen()?this.terminal.write("The socket is already open you potato."):(this.terminal.write("Connecting to Kraken Websockets API..."),this.socket=new WebSocket(this.socketUri),this.addEventsListener())}checkSocketOpen(){let t=!1;return this.socket&&1==this.socket.readyState&&(t=!0),t}closeSocket(){this.checkSocketOpen()?(this.terminal.write("Disconnecting..."),this.socket.close()):this.terminal.write("The socket is not open !",0)}getConnectionInfos(){let t='{"error": "Oops. Something bad happened :("}';return t=this.socket?`{\n\t\t\t\t"binaryType": "${this.socket.binaryType}",\n\t\t\t\t"bufferedAmount": "${this.socket.bufferedAmount}",\n\t\t\t\t"extensions": "${this.socket.extensions}",\n\t\t\t\t"protocol": "${this.socket.protocol}",\n\t\t\t\t"readyState": "${this.socket.readyState}",\n\t\t\t\t"url": "${this.socket.url}"\n\t\t\t}`:'{"error": "The socket is undefined you potato. Did you open one ?"}',t}addResult(t,e){let n=JSON.parse(t);n=JSON.stringify(n,null,2),this.jsonDestinationContainer.insertAdjacentHTML("afterbegin",`<pre onclick="this.classList.toggle('open');" class="result-${e}">${n}</pre>`)}}let s=null,r=null;const a=function(t){t.preventDefault();const e=t.srcElement.querySelector('input[type="text"]');r?(s.skipAnimation(),r.submitCommand(t.srcElement)):"hello"==e.value||"Hello"==e.value?(r=new o(s,"websockets-results-container"),s.write(["Hello there ! Let's get down to business...","Kraken being a financial service, the public requests are pretty limited (even for public data, like OHLC data) so without authentication, we won't go too far. But the point is not to go crazy here. Just connect to a server, send a message and get a reply. And write some code. About that, you can check the code on the GitHub repository. If you want to go further, you have a small code base that should be easy to understand.","Made with TypeScript, Sass and HTML5, by Picleb, with love ❤️",'Type a valid command to continue. Ex: "connect" to connect to the server.']),e.value=""):(s.write("Ok no Hello for me :'("),e.value="Hello")};window.onload=()=>{s=new i("terminal-text-container"),document.getElementById("terminal-form-command").addEventListener("submit",a)}}]);